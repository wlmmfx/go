<?php

namespace app\backend\controller\auth;

use app\common\controller\BaseBackend;
use app\common\library\Auth;
use app\common\model\TaskList;
use think\Db;
use think\Request;

class Admin extends BaseBackend
{
    protected $_db;

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->_db = new \app\common\model\Admin();

    }

    /**
     * 显示资源列表
     *
     * @return \think\Response
     */
    public function adminList()
    {
        $auth = new Auth();
        // 获取用户组 $groups = $auth->getGroups(session("admin.admin_id"));
        $where['enable'] = 1;
        $where['deleted'] = 0;
        $adminInfo = db('user')->where($where)->select();
        $groups = db('auth_group')->select();
        $adminArr = [];
        foreach ($adminInfo as $k => $v) {
            $v['title'] = $auth->getGroups($v['id'])[0]['title'];
            $adminArr[] = $v;
        }
        $this->assign('groups', $groups);
        $this->assign('lists', $adminArr);
        return $this->fetch();
    }

    /**
     * 保存新建的资源
     *
     * @param  \think\Request $request
     * @return \think\Response
     */
    public function store(Request $request)
    {
        if ($request->isPost()) {
            $data = input('post.');
            $groupId = $data['groupid'];
            $data['password'] = md5('123456');
            $data['logintime'] = time();
            unset($data['groupid']);
            //事务操作
            Db::startTrans();
            try {
                $userId = db('user')->insertGetId($data);
                $groupData['group_id'] = $groupId;
                $groupData['uid'] = $userId;
                $res = db('auth_group_access')->insertGetId($groupData);
                Db::commit();
            } catch (\Exception $e) {
                $res = $e->getMessage();
                Db::rollback();
            }
            halt($res);
        }
    }

    /**
     * 改变用户角色
     * 可以支持不执行SQL而只是返回SQL语句:$User->fetchSql(true)->add($data);
     */
    public function updateGroup()
    {
        if (request()->isPost()) {
            $uid = input('post.uid');
            $groupId = input('post.group_id');
            $res = db('auth_group_access')->where('uid', $uid)->setField('group_id', $groupId);
            if ($res === false) {
                $res = self::returnCode(5002);
            } else {
                $res = self::returnCode(2002);
            }
            return $res;
        }
        $userId = input('param.id');
        $userInfo = Db::table('resty_user')
            ->alias('u')
            ->join('resty_auth_group_access access', 'u.id = access.uid')
            ->where(['access.uid' => $userId])->find();
        $this->assign('groups', db('auth_group')->select());
        $this->assign('userInfo', $userInfo);
        return $this->fetch();
    }

    /**
     * 删除指定资源
     * @param  int $id
     * @return \think\Response
     */
    public function delete()
    {
        if (request()->isAjax()) {
            $res = $this->_db->del(input('post.id'));
            if ($res['valid']) {
                return json(['code' => 200, 'msg' => $res["msg"]]);
            }
            return json(['code' => 500, 'msg' => $res["msg"]]);
        }
        return json(['code' => 401, 'msg' => "Not Forbidden"]);
    }

    /**
     * 发送邮件
     */
    public function sendMail()
    {
        $uid = input('param.id');
        $userInfo = $this->_db->where(['id' => $uid])->find();
        $res = addEmailTaskQueue(1,1, $userInfo['email']);
        if ($res) {
            $this->success($res["msg"]);
            exit;
        } else {
            $this->error($res["msg"]);
            exit;
        }
    }
}
