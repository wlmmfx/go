<?php

namespace app\backend\controller;

use app\common\controller\BaseBackend;
use think\Db;
use think\Log;

class System extends BaseBackend
{
    const SHELL_SCRIPT_PATH = "/home/www/web/go-study-line/shell/system/";

    public function _initialize()
    {
        return parent::_initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * 系统配置
     */
    public function config()
    {
        return $this->fetch();
    }

    /**
     *
     * @return mixed
     */
    public function basicConfig()
    {
        $file = CONF_PATH . 'extra/webinfo.php';
        $config = array_merge(include $file, array_change_key_case($_POST, CASE_UPPER));
        // 以下将一个数组转换成一个字符串
        $str = "<?php\r\n return " . var_export($config, true) . ";\r\n?>";
        if (file_put_contents($file, $str)) {
            return json(['code' => 200, 'msg' => '系统信息修改成功']);
        }
        return json(['code' => 500, 'msg' => '系统信息修改失败']);
    }

    /**
     * 这里如果修改session的配置信息，应该是直接退出登录的
     */
    public function sessionConfig()
    {
        $file = CONF_PATH . 'extra/session.php';
        $config = array_merge(include $file, array_change_key_case($_POST, CASE_LOWER));
        // 以下将一个数组转换成一个字符串
        $str = "<?php\r\n return " . var_export($config, true) . ";\r\n?>";
        if (file_put_contents($file, $str)) {
            return $this->success('Session信息修改成功', "backend/login/login");
        }
        return $this->success('Session信息修改失败');
    }

    /**
     * 开发配置
     * @return mixed
     */
    public function developmentConfig()
    {
        $file = CONF_PATH . 'config.php';
        $develop_config = array_merge(include $file, array_change_key_case($_POST, CASE_LOWER));
        // 以下将一个数组转换成一个字符串
        $str = "<?php\r\n return " . var_export($develop_config, true) . ";\r\n?>";
        if (file_put_contents($file, $str)) {
            return $this->success('环境切换成功');
        }
        return $this->success('环境切换失败');
    }

    /**
     * 邮箱配置
     * @return mixed
     */
    public function emailConfig()
    {
        if (request()->isPost()) {
            $file = CONF_PATH . 'extra/email.php';
            $config = array_merge(include $file, array_change_key_case($_POST, CASE_UPPER));
            // 以下将一个数组转换成一个字符串
            $str = "<?php\r\n return " . var_export($config, true) . ";\r\n?>";
            if (file_put_contents($file, $str)) {
                return $this->success('修改成功');
            }
            return $this->success('修改失败');
        }
    }

    /**
     * @return mixed
     */
    public function wechatConfig()
    {
        $file = CONF_PATH . 'extra/wechat.php';
        $config = array_merge(include $file, array_change_key_case($_POST, CASE_UPPER));
        // 以下将一个数组转换成一个字符串
        $str = "<?php\r\n return " . var_export($config, true) . ";\r\n?>";
        if (file_put_contents($file, $str)) {
            return $this->success('系统信息修改成功');
        }
        return $this->success('系统信息修改失败');
    }

    /**
     * 权限配置
     * @return mixed
     */
    public function authConfig()
    {
        $file = CONF_PATH . 'extra/auth_config.php';
        $config = array_merge(include $file, array_change_key_case($_POST, CASE_LOWER));
        // open_auth 的字符串转化为数组
        $config['open_auth'] = explode(',', $config['open_auth']);
        if (!is_array($config['open_auth'])) {
            return $this->success('系统信息修改失败1');
        }
        // 统一将数组转换成一个字符串
        $str = "<?php\r\n return " . var_export($config, true) . ";\r\n?>";
        if (file_put_contents($file, $str)) {
            return $this->success('系统信息修改成功');
        }
        return $this->success('系统信息修改失败2');
    }

    /**
     * @return mixed
     */
    public function payConfig()
    {
        $this->assign('sub_title', "支付配置");
        return $this->fetch();
    }

    /**
     * 存储配置
     * @return mixed
     */
    public function storageConfig()
    {
        $file = CONF_PATH . 'extra/aliyun_oss.php';
        $config = array_merge(include $file, array_change_key_case($_POST, CASE_UPPER));
        $str = "<?php\r\n return " . var_export($config, true) . ";\r\n?>";
        if (file_put_contents($file, $str)) {
            return $this->success('OSS信息修改成功');
        }
        return $this->success('OSS信息修改失败');
    }

    /**
     * 系统Log
     * @return mixed
     */
    public function actionLog()
    {
        $logs = Db::name("logs")->order('id desc')->paginate(20);
        $this->assign('logs', $logs);
        $this->assign('sub_title', "日志文件");
        return $this->fetch();
    }

    /**
     * 清除缓存操作
     * $sysStatus 返回值：[0]：执行成功 [1]：脚本参数为空 [2]：项目目录不存在
     */
    public function clearCache()
    {
        $cmdStr = self::SHELL_SCRIPT_PATH . "clear_cache.sh " . ROOT_PATH;
        Log::notice('[' . getCurrentDate() . ']:' . "[01] ------------------------------------启动一个CLi进程 开始--------------------------------" . $cmdStr);
        exec("{$cmdStr}", $results, $sysStatus);
        Log::error('[' . getCurrentDate() . ']:' . "------------------------------------sysStatus::" . $sysStatus);
        if ($sysStatus != 0) {
            return json(['code' => 500, 'msg' => '缓存清理失败，请查看日志文件信息']);
        }
        return json(['code' => 200, 'msg' => "缓存清理成功"]);
    }

    /**
     * 返回值数据，以后需要做一个公共的出来
     * @param $code
     * @return mixed|string
     * @static
     */
    private static function consoleResultMsg($code)
    {
        $msg = [
            '0' => '执行成功',
            '-1' => '脚本参数不对应',
            '-2' => '项目目录不存在',
            '-3' => '清理缓存文件失败',
            '-4' => '生成路由缓存失败',
            '-5' => '生成配置缓存失败',
            '-6' => '生成数据表字段缓存失败',
            '-10' => '没有匹配的类型'
        ];
        $result = $msg[$code];
        if ($result == null) return "unknown code " . $code;
        return $result;
    }

    /**
     * 命令行操作
     * 通过命令行的方式执行一些URL访问不方便或者安全性较高的操作
     * $type 执行类型:
     * [1] clear：清除缓存文件
     * [2] optimize_route：生成路由缓存
     * [3] optimize_config：生成配置缓存
     * [4] optimize_schema：生成数据表字段缓存
     */
    public function systemConsole()
    {
        if (!request()->isAjax()) return json(['status' => 403, 'msg' => "非Ajax请求"]);
        $type = request()->get('type');
        if (empty($type)) return json(['status' => 401, 'msg' => "参数为空"]);
        $cmdStr = self::SHELL_SCRIPT_PATH . "system_console.sh " . ROOT_PATH . ' ' . $type;
        Log::error('[' . getCurrentDate() . ']:' . "[01] ------------------------------------启动一个CLi进程 开始--------------------------------" . $cmdStr);
        // $results 返回结果为一个数组
        exec("{$cmdStr}", $results, $sysStatus);
        Log::error('[' . getCurrentDate() . ']:' . "[02] ------------------------------------sysStatus::" . $sysStatus);
        if ($sysStatus != 0) {
            return json(['code' => 500, 'msg' => self::consoleResultMsg($results[0])]);
        }
        return json(['code' => 200, 'msg' => self::consoleResultMsg($results[0])]);
    }

}
