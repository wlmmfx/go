<?php

/** .-----------------------------------------------------------------------------------------------------------------
 * |  Github: https://github.com/Tinywan
 * |  Blog: http://www.cnblogs.com/Tinywan
 * |-------------------------------------------------------------------------------------------------------------------
 * |  Author: Tinywan(ShaoBo Wan)
 * |  DateTime: 2017/12/21 13:50
 * |  Mail: Overcome.wan@Gmail.com
 * '------------------------------------------------------------------------------------------------------------------*/

namespace app\business\controller;

use app\common\controller\BaseFrontend;
use app\common\model\Comments;
use app\common\model\OpenUser;
use think\Db;

class Index extends BaseFrontend
{
    protected $open_user_db;

    protected $comment_db;

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->open_user_db = new OpenUser();
        $this->comment_db = new Comments();
    }

    // 首页
    public function index()
    {
        $article = Db::table("resty_article")
            ->alias('a')
            ->join('resty_category c', 'c.id = a.cate_id')
            ->join('resty_user u', 'u.id = a.admin_id')
            ->field("a.title,a.create_time,a.content,a.id,a.views,a.image_thumb,a.desc,c.name as c_name,u.username")
            ->order("a.create_time desc,a.id desc")
            ->cache("RESTY_ARTICLE")
            ->limit(6)
            ->select();
        $articlesList = Db::table("resty_article")
            ->alias('a')
            ->join('resty_category c', 'c.id    = a.cate_id')
            ->join('resty_user u', 'u.id = a.admin_id')
            ->field("a.title,a.create_time,a.content,a.id,a.views,a.image_thumb,a.desc,c.name as c_name,u.username")
            ->order("a.create_time desc,a.id desc")
            ->cache("RESTY_ARTICLE_LIST")
            ->limit(8)
            ->select();
        $this->assign('articles', $article);
        $this->assign('articlesList', $articlesList);
        return $this->fetch();
    }

    // 详情
    public function detail()
    {
        $postId = input("param.id");
        if (empty($postId) || !is_numeric($postId)) {
            return json(['code' => 404]);
        }
        $article = Db::table("resty_article")
            ->alias('a')
            ->join('resty_category c', 'c.id = a.cate_id')
            ->join('resty_user u', 'u.id = a.admin_id')
            ->field("a.title,a.id,a.create_time,a.content,a.views,c.name as c_name,u.username")
            ->where('a.id', ':id')
            ->bind(['id' => [$postId, \PDO::PARAM_INT]])
            ->cache('RESTY_ARTICLE_DETAIL:' . $postId)
            ->find();
        // 更新缓存
        Db::table('resty_article')->where('id', ':id')->bind(['id' => [$postId, \PDO::PARAM_INT]])->cache('RESTY_ARTICLE_DETAIL:' . $postId)->setInc('views');
        $comments = $this->getCommentListByPostId($postId);
        $this->assign('article', $article);
        $this->assign('comments', $comments);
        $this->assign('postId', $postId);
        return $this->fetch();
    }

    /**
     * 评论暂时不做缓存
     * 1、通过文章ID遍历获取全部评论以及回复
     * 2、这里不可以使用缓存，TP5自带的
     * @param $post_id
     * @param int $parent_id
     * @param array $result
     * @return array
     */
    public function getCommentListByPostId($post_id, $parent_id = 0, &$result = [])
    {
        $arr = Db::table("resty_comment")
            ->alias('c')
            ->join('resty_open_user ou', 'c.user_id = ou.id')
            ->field('c.comment_id,c.user_id,c.article_id,c.parent_id,c.comment_content,c.zan,c.parent_id,c.create_time,ou.account,ou.avatar')
            ->where('c.article_id', $post_id)
            ->where('c.parent_id', $parent_id)
            ->order('c.create_time desc')
            ->select();
        if (empty($arr)) return [];
        foreach ($arr as $cm) {
            $thisArr =& $result[];
            $cm["children"] = $this->getCommentListByPostId($cm["article_id"], $cm["comment_id"], $thisArr);
            $thisArr = $cm;
        }
        return $result;
    }

    /**
     * 由于异步暂时不做缓存
     * 发表评论、回复公用一个控制器
     */
    public function commentStore()
    {
        if (request()->isPost()) {
            $data['article_id'] = input('post.post_id');
            $data['parent_id'] = input('post.parent_id');
            $data['user_id'] = input('post.user_id');
            $data['comment_content'] = input('post.comment_content');
            if (empty($data['comment_content'])) {
                $res = ["code" => 500, "msg" => 'param is error'];
                return json($res);
            }
            $res = $this->comment_db->store($data);
            if ($res["valid"]) {
                $responseData = Db::table("resty_comment")
                    ->alias('c')
                    ->join('resty_open_user ou', 'c.user_id = ou.id')
                    ->field('c.comment_id,c.user_id,c.article_id,c.parent_id,c.comment_content,c.parent_id,c.create_time,ou.account,ou.avatar')
                    ->where('c.comment_id', $res["id"])
                    ->find();
                $responseData['num'] = count($this->getCommentListByPostId($data['article_id']));
                //格式化时间输出
                $responseData['create_time'] = date('Y-m-d H:i:s', $responseData['create_time']);
                $res = [
                    "code" => 200,
                    "msg" => $res["valid"],
                    'list' => $responseData
                ];
            } else {
                $res = ["code" => 500, "msg" => $res["valid"]];
            }
            return json($res);
        }
    }

    /**
     * 评论点赞功能
     */
    public function posterZan()
    {
        if (request()->isPost()) {
            $id = input('post.id');
            $user_id = input('post.user_id');
            $zan_user_id = input('post.zan_user_id');
            $res = Db::table('resty_comment')->where('comment_id',$id)->setInc('zan');
            if(!$res){
                $res = ["code" => 500, "msg" => 'fail'];
                return json($res);
            }
            $res = ["code" => 200, "msg" => 'success'];
            return json($res);
        }
    }

    /**
     * 删除评论
     */
    public function delComment()
    {
        if (request()->isPost()) {
            $id = input('post.id');
            $res = Db::table('resty_comment')->where('comment_id',$id)->delete();
            if(!$res){
                $res = ["code" => 500, "msg" => 'fail'];
                return json($res);
            }
            $res = ["code" => 200, "msg" => 'success'];
            return json($res);
        }
    }
}